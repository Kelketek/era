( Era by Kelketek of Winter's Oasis
UNIX-style MUF cron.

    This program must be set W on Fuzzball, or owned by an archwizard on
ProtoMUCK.

    This program has security implications. It should not be run as #1.
To do so would give any wizard the ability to assume total control if
FATE is an object any wizard can control. If you only want to have #1
manage the cron tab, it may be ok to use him, but you will have to make
sure all cron programs are owned by #1, FATE is owned by #1, and the MUCK
is compiled with GOD_PRIVs.

    ProtoMUCK wizards are recommended to set the crontab on an object that
can be supervised by only a particular wizard and which can be set 'Protect'
to avoid unintentional or malicious modification. You may also wish to
set up a dedicated wizard just for cron jobs, but configuration is your
prerogative.

  Copyright [c] 2012, Kelketek of Winter's Oasis
  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:
     * Redistributions of source code must retain the above copyright
       notice, this list of conditions and the following disclaimer.
     * Redistributions in binary form must reproduce the above copyright
       notice, this list of conditions and the following disclaimer in the
       documentation and/or other materials provided with the distribution.
     * Neither the name of Kelketek nor Winter's Oasis nor the
       names of its contributors may be used to endorse or promote products
       derived from this software without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  DISCLAIMED. IN NO EVENT SHALL KELKETEK OR WINTER'S OASIS BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  [INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION] HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  [INCLUDING NEGLIGENCE OR OTHERWISE] ARISING IN ANY WAY OUT OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. )

$include $lib/editor
$include $lib/case

$def TRUE 1
$def FALSE 0
$def INVALID #-1
$def FATE prog ( Whichever DBREF you intend to store the crontab on )
$def CRONDIR "@cron" ( Directory where cron-related props will be stored. )
$def CRONTAB CRONDIR "/crontab" strcat ( Location of the crontab )
$def CRONPID CRONDIR "/pid" strcat ( Location of PID number )
( A crontab entry has six parts.
Minute, Hour, Day of Week, Month, Year, and the command )
$def CRON_SEGMENTS 6
$def TEST_TYPE 0 ( The test type is the first item in a list array )
$ifdef __neon
    $def wizard "W" "wizhidden_level" sysparm intostr strcat
$else
    $def wizard "W"
$endif

$def UNDEFINED -1

$def JAN 1
$def FEB 2
$def MAR 3
$def APR 4
$def MAY 5
$def JUN 6
$def JUL 7
$def AUG 8
$def SEP 9
$def OCT 10
$def NOV 11
$def DEC 12

$def SUN 0
$def MON 1
$def TUE 2
$def WED 3
$def THU 4
$def FRI 5
$def SAT 6

$def DAYS_IN_WEEK 7

lvar MONTHS
lvar PRESETS
lvar DAYS_IN_MONTHS
lvar DAYS_OF_WEEK
lvar COMMAND_KEYS
lvar compiled_crontab
lvar this_years_monthdays
lvar current_time
lvar last_year
lvar parser_address

: set_constants ( -- ) ( sets more complex 'constants' )
     { "SUN" "0"
       "MON" "1"
       "TUE" "2"
       "WED" "3"
       "THU" "4"
       "FRI" "5"
       "SAT" "6" }dict DAYS_OF_WEEK !

     ( For string substitution )
     { "JAN" "1"
       "FEB" "2"
       "MAR" "3"
       "APR" "4"
       "MAY" "5"
       "JUN" "6"
       "JUL" "7"
       "AUG" "8"
       "SEP" "9"
       "OCT" "10"
       "NOV" "11"
       "DEC" "12" }dict MONTHS !

     ( For math )
     { JAN 31
       FEB 28 ( To be modified later, in some cases. )
       MAR 31
       APR 30
       MAY 31
       JUN 30
       JUL 31
       AUG 31
       SEP 30
       OCT 31
       NOV 30
       DEC 31 }dict DAYS_IN_MONTHS !

     { "^([[:space:]]+)?@anually" "0 0 1 1 *"
       "^([[:space:]]+)?@monthly" "0 0 1 * *"
       "^([[:space:]]+)?@weekly"  "0 0 * * 0"
       "^([[:space:]]+)?@daily"   "0 0 * * *"
       "^([[:space:]]+)?@hourly"  "0 * * * *" }dict PRESETS !
;

: get_time ( -- @ ) ( Gets the current time, puts it into a workable arrray. )
    { systime timesplit }list var! timevar
    ( We won't be using all of these. )
    { "second" "minute" "hour" "monthday" "month" "year" "day_of_week" "yearday" }list
    { swap
        foreach
            swap timevar @ swap array_getitem ( Zip these up into a dictionary array )
        repeat
    }dict timevar !
    ( Correct some incompatibility. Day_of_week starts at 1 instead of 0 like it should. )
    timevar @ "day_of_week" timevar @ "day_of_week" array_getitem -- swap rot swap array_setitem current_time !
    
;

: ctell ( s -- ) ( Emits a message if the player is valid, otherwise discards it. )
    me @ ok? not if
        exit
    then
    me @ swap notify
;

: month_days_set ( This has to be a function due to leap years. )
    var year
    current_time @ "year" array_getitem year !
    ( Leap years are screwwy. )
    year @ 4 % not if
        year @ 100 % not if
            year @ 400 % not if
                TRUE
            else
                FALSE
            then
        else
            TRUE
        then
    else
        FALSE
    then
    if
        29 DAYS_IN_MONTHS @ FEB array_setitem this_years_monthdays !
    else
        DAYS_IN_MONTHS @ this_years_monthdays !
    then
;

: split_once[ str:target str:delimiter -- {} ]  ( Like strcut, but splits at a delimiter once, eliminating it. )
    target @ delimiter @ instr var! char
    char @ not if
        target @ ""
    else
        target @ char @ 1 - strcut
        delimiter @ strlen strcut swap pop
    then
;

: dash_parse[ str:raw_string str:cmd -- @:test ] ( Parses notations like "2-6" )
    var start_digit
    var end_digit
    cmd @ "^[[:digit:]]+-[[:digit:]]+$" REG_ICASE regexp and not if
        { "Invalid dash notation -- '" cmd @ "'" }cat abort
    then
    cmd @ "-" split_once end_digit ! start_digit !
    { start_digit @ atoi end_digit @ atoi "-" }list
    
;

: slash_parse[ str:raw_string str:cmd -- @:test ] ( Parses notations like "*/4" )
    var interval
    cmd @ "^[^/]*/[[:digit:]]+$" REG_ICASE regexp and not if
        { "Invalid slash notation -- '" cmd @ "'" }cat abort
    then
    cmd @ "/" split_once interval !
    {   swap "Slash" swap dup FALSE FALSE parser_address @ execute ( The slash operator can have other operators as the numerator. )
        interval @ atoi "/"                                        ( This address hack due to interdependence. )
    }list
;

: w_parse[ str:raw_string str:cmd -- @:test ]
    var interval
    cmd @ "^[[:digit:]]+W$" REG_ICASE regexp and not if
        { "Invalid W notation -- '" cmd @ "'" }cat abort
    then
    cmd @ toupper "W" split_once pop interval !
    { interval @ atoi "W" }list
;

: l_parse[  str:time_type str:raw_string str:cmd -- @:test ]
    time_type @ "monthday" strcmp not cmd @ toupper "L" strcmp not and if
        { UNDEFINED "L" }list exit
    then
    var interval
    cmd @ "^[[:digit:]]+L$" REG_ICASE regexp and if
        cmd @ toupper "L" split_once pop interval !
        { interval @ atoi "L" }list exit
    then
    { "Invalid L notation -- '" raw_string @ "'" }cat abort
;

: dict_sub[ str:source_string dict:subst_dict -- str:processed_string ] ( Does a set of substitutions based on a dictionary )
    subst_dict @ foreach
        source_string @ -3 rotate REG_ICASE REG_ALL + regsub source_string !
    repeat
    source_string @
;

: parser[ str:time_type str:raw_time_string str:time_string bool:w_permitted? bool:l_permitted? -- @:time_tests ]
    var item
    'parser parser_address !
    { time_string @ "," explode array_make
      foreach
          item ! pop
          item @ case
              "/" instr when
                  raw_time_string @ item @ slash_parse
              end
              "*" strcmp not when
                  { "*" }list
              end
              "-" instr when
                  raw_time_string @ item @ dash_parse
              end
              "^[[:digit:]]+$" REG_ICASE regexp and when
                  { item @ atoi "digit" }list
              end
              "W" instring when
                  w_permitted? @ if
                      raw_time_string @ item @ w_parse
                  else
                      { "W not permitted in " time_type @ " field." }cat abort
                  then
              end
              "L" instring when
                  l_permitted? @ if
                      time_type @ raw_time_string @ item @ l_parse
                  else
                      { "L not permitted in " time_type @ " field." }cat abort
                  then
              end
              default { "Invalid syntax for " time_type @ " -- '" item @ "'" }cat abort end
          endcase
      repeat
    }list
;

: parse_minute[ str:minute_string -- str:"minute" @:minute_tests ] ( Parses the minute notation )
    "minute" dup minute_string @ dup FALSE FALSE parser
;

: parse_hour[ str:hour_string -- str:"hour" @:day_tests ]
    "hour" dup hour_string @ dup FALSE FALSE parser
;

: parse_monthday[ str:monthday_string -- str:"day" @:day_tests ]
    "monthday" dup monthday_string @ dup TRUE TRUE parser
;

: parse_month[ str:month_string -- str:"month" @:month_tests ]
    "month" dup month_string @ dup MONTHS @ dict_sub FALSE FALSE parser
;

: parse_day_of_week[ str:day_of_week_string -- str:"year" @:year_tests ]
    "day_of_week" dup day_of_week_string @ dup DAYS_OF_WEEK @ dict_sub FALSE TRUE parser
;

: parse_target[ str:target_string -- "target" @:target_spec ]
    "target"
    var target
    target_string @ match target !
    target @ ok? target @ program? and not if
        { "Command ambiguous, invalid or nonexistant. String was '" target_string @
          "', match output was: " target @ unparseobj }cat abort
    then
    { target @ }list
;

: line_to_spec[ str:line -- array:cronitem ]
( Takes a string and derives a speclist from it. Returns true or false and an array 
  or a string respectively )

    var count
    var minute
    var hour
    var day_of_week
    var month
    var year
    var target
    var argument
    var compiled_line

    ( Separate the argument from the rest of the cron tab )
    line @ "|" split_once argument ! line !

    line @ PRESETS @ dict_sub line !

    { 
      'parse_minute 'parse_hour 'parse_monthday 'parse_month 'parse_day_of_week 'parse_target 
    }list var! parsetable


    line @ " " explode array_make line !
    ( Eliminate null strings from the explosion, if any. )
    { line @ foreach
          swap pop dup "" strcmp not if
               pop
          then
      repeat
     }list array_reverse line !

    line @ array_count CRON_SEGMENTS = not if
        "Cron entry has the wrong number of components." abort
    then
    {
        line @ foreach
              swap count !
              parsetable @ count @ array_getitem execute
          repeat
        
    }dict compiled_line !
    compiled_line @ "target" array_getitem argument @ swap array_appenditem
    compiled_line @ "target" array_setitem
;

: crontab_load ( -- ) ( Runs through the crontab and parses it )
    var raw_crontab
    var line
    var count
    var error
    set_constants
    "Loading crontab..." ctell
    FATE CRONTAB array_get_proplist raw_crontab !
    { raw_crontab @ foreach
        swap pop
        count @ ++ count !
        1 try
            line_to_spec
        catch
            error ! { "Error parsing line " count @ ": " error @ }cat ctell
        endcatch
     repeat
    }list compiled_crontab !
    "Crontab loaded." ctell
;

: get_current_monthdays ( -- i )
    this_years_monthdays @ current_time @ "month" array_getitem array_getitem
;

: weekday?[ int:day ] ( Checks if a number represents a weekday. )
    day @ MON >= day @ FRI <= and if
        TRUE
    else
        FALSE
    then
;

: date_beyond_monthborder?[ int:date_to_check ] ( Checks if a date is beyond month bounds. )
    date_to_check @ 1 < date_to_check @ get_current_monthdays > or if
        TRUE
    else
        FALSE
    then
;

: W[ int:day_of_month str:time_type -- bool:result ] ( Execute on closest weekday )
    var current_day_of_month
    var current_day_of_week
    var current_month
    var this_months_maxdays
    var difference
    var target_actual_day_of_week
    var shift
    var guess
    current_time @ "monthday" array_getitem current_day_of_month !
    current_time @ "day_of_week" array_getitem current_day_of_week !
    ( Simple scenario. Date is today, today is a weekday )
    day_of_month @ current_day_of_month @ = if
        current_day_of_week @ weekday? if
            TRUE exit
        then
    then
    ( If it's not a Monday or Friday, it's not the closest day. )
    current_day_of_week @ MON = current_day_of_week @ FRI = or not if
        FALSE exit
    then
    ( A candidate weekday is never more than 2 days away. )
    current_day_of_month @ day_of_month @ - abs 2 > if
        FALSE exit
    then
    ( Get day of week of target date )
    day_of_month @ current_day_of_month @ - difference !
    current_day_of_week @ difference @ + target_actual_day_of_week !
    target_actual_day_of_week @ DAYS_IN_WEEK > if ( More than a week? Roll over. )
        target_actual_day_of_week SAT - target_actual_day_of_week !
    then
    target_actual_day_of_week @ SUN < if ( Before Sunday? Roll the other way. )
        target_actual_day_of_week SAT + target_actual_day_of_week !
    then
    ( Saturdays are closest to Fridays. One day lower. )
    ( Sundays are closest to Mondays. One day higher. )
    target_actual_day_of_week @ SAT = if
        -1 shift !
    else
        1 shift !
    then
    day_of_month @ shift @ + guess !
    guess @ date_beyond_monthborder? if
        ( If it's Saturday and Friday is not in the month, Monday. )
        ( If it's Sunday, and Monday is not in the month, Friday. )
        shift @ 0 < if
            guess @ 2 + guess !
        else
            guess @ 2 - guess !
        then
        guess @ current_day_of_month = if
            TRUE exit
        else
            FALSE exit
        then
    else
        guess @ current_day_of_month @ = if
            TRUE exit
        else
            FALSE exit
        then
    then
;

: L[ int:day str:time_type -- bool:result ]
    var current_day_of_week
    ( If this is for the month field, check if this is the
      last day of the month. )
    time_type @ "monthday" strcmp not if
        get_current_monthdays current_time @ "monthday" array_getitem = if
            TRUE exit
        else
            FALSE exit
        then
    then
    ( If this is in the day_of_week field and there is no
      day defined, do it on the last day of the week. )
    current_time @ "day_of_week" array_getitem current_day_of_week !
    day @ UNDEFINED = if
        current_day_of_week @ SAT = if
            TRUE exit
        then
    then

    ( If it's not the day of week we want, it's not relevant. )
    current_day_of_week @ day @ = not if
        FALSE exit
    then
    ( Is it the last time this day of week appears this month? )
    current_time @ "monthday" array_getitem DAYS_IN_WEEK +
    date_beyond_monthborder? if
        TRUE exit
    else
        FALSE exit
    then
;

: dash[ int:begin_number int:end_number str:time_type -- bool:result ]
    var this_time
    current_time @ time_type @ array_getitem this_time !
    this_time @ begin_number @ >= this_time @ end_number @ <= and if
        TRUE
    else
        FALSE
    then
;

: slash[ arr:numerator int:interval str:time_type  -- bool:result ] ( Runs a / test. )
    numerator @ array_vals pop array_vals pop ( numerator command is in a wrapper )
    COMMAND_KEYS @ swap array_getitem time_type @ swap execute if
        current_time @ time_type @ array_getitem interval @ % not if
            TRUE
        else
            FALSE
        then
    else
        FALSE
    then
;

: star[ str:time_type -- bool:TRUE ] ( Returns true. Star is always true. )
    TRUE
;

: digit[ int:integer str:time_type -- bool:result ]
    current_time @ time_type @ array_getitem integer @ = if
        TRUE
    else
        FALSE
    then
;

: generate_command_keys ( Fill the lvar with a dictionary for the tests. )
    {     
        "W" 'W
        "L" 'L
        "-" 'dash
        "/" 'slash
        "*" 'star 
        "digit" 'digit
    }dict COMMAND_KEYS ! 
;

: run_tests ( @ -- bool:result ) ( Runs all tests. Determines if a program should launch now. )
    var test_passed
    var time_type
    "target" array_delitem
    foreach
        swap time_type !
        foreach
            swap pop
            array_vals pop COMMAND_KEYS @ swap array_getitem time_type @ swap execute if
                TRUE test_passed ! break
            then
        repeat
        test_passed @ not if
            FALSE exit
        else
            FALSE test_passed !
        then
    repeat
    TRUE
;

: launch_progs ( Launches each of the programs in the crontab. )
    var current_command
    fork if
        exit
    then
    get_time
    month_days_set
    compiled_crontab @
    foreach
        swap pop current_command !
        current_command @ run_tests if
            current_command @ "target" array_getitem
            array_vals try
                swap call
            catch ( Remember to fill this in properly later. -Kel )
                pop
            endcatch
        then
    repeat
;

: get_pid ( -- i ) ( Gets the PID the cron process recorded when the daemon launched. )
    prog CRONPID getpropstr atoi
;

: main_loop ( -- ) ( Main loop for the cron process )
    var oldme
    set_constants
    generate_command_keys
    get_pid ispid? if
        "Cron already running. Aborted." ctell exit
    then
    prog CRONPID pid intostr setprop
    crontab_load
    "Cron start." ctell
    background
    begin
        60 "Minute" timer_start
        event_wait
        case
            "TIMER.Minute" smatch when
                pop launch_progs
                get_pid pid = not if ( Terminate the forked process )
                    exit
                then
            end
            "USER.Reload" smatch when
                me @ oldme ! ( Reloader may be different. )
                "player" array_getitem me ! crontab_load
                oldme @ me !
            end
            "USER.Stop" smatch when
                exit
            end
            default
                pop continue
            end
        endcase
    repeat
;

: list_crontab
    "Listing crontab..." ctell
    FATE CRONTAB array_get_proplist
    foreach
        swap pop ctell
    repeat
    "Done." ctell
;

: live_reload
    0 try
        "Sending reload signal..." ctell
        get_pid var! this_pid
        this_pid @ ispid? if
            this_pid @ "Reload" TRUE event_send
        else
            "Cron process not running!" abort
        then
        "Reload signal sent." ctell
    catch
        "Reload signal failed! Error: " swap strcat ctell
    endcatch
;


: edit_crontab
    FATE CRONTAB array_get_proplist array_vals EDITOR "end" stringcmp not if ( Save the list. )
        "Installing new crontab..." ctell
        array_make FATE CRONTAB rot array_put_proplist
        "Crontab installed." ctell
        live_reload
    else
        "Aborted." ctell
    then
;

: stop
    0 try
        get_pid var! this_pid
        this_pid @ ispid? not if
            "Process not running!" abort
        then
        "Sending stop signal..." ctell
        prog CRONPID getpropstr atoi "Stop" TRUE event_send
        "Stop signal sent." ctell
    catch
        "Stop signal failed! Error: " swap strcat ctell
    endcatch
;

: do-help
    "Supply an argument." ctell ( To be revised longer. )
;

: main
    var! arg
    "me" match me !

    me @ wizard flag? me @ FATE controls and not if
        "Permission denied." ctell
    then

    arg @ case 
        "Startup" strcmp not if
            main_loop exit
        end
        "#r*" smatch when
            live_reload exit
        end
        "#e*" smatch when
            edit_crontab exit
        end
        "#l*" smatch when
            list_crontab exit
        end
        "#sta*" smatch when
            main_loop exit
        end
        "#sto*" smatch when
            stop exit
        end
        "" strcmp not when
            do-help
        end
        default "Command not recognized: " arg @ strcat ctell end
    endcase
;
