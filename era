( Era by Kelketek of Winter's Oasis
UNIX-style MUF cron.

    This program must be set W on Fuzzball, or owned by an archwizard on
ProtoMUCK.

    This program has security implications. It should not be run as #1.
To do so would give any wizard the ability to assume total control if
FATE is an object any wizard can control. If you only want to have #1
manage the cron tab, it may be ok to use him, but you will have to make
sure all cron programs are owned by #1, FATE is owned by #1, and the MUCK
is compiled with GOD_PRIVs.

    ProtoMUCK wizards are recommended to set the crontab on an object that
can be supervised by only a particular wizard and which can be set 'Protect'
to avoid unintentional or malicious modification. You may also wish to
set up a dedicated wizard just for cron jobs, but configuration is your
prerogative.

  Copyright [c] 2012, Kelketek of Winter's Oasis
  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:
     * Redistributions of source code must retain the above copyright
       notice, this list of conditions and the following disclaimer.
     * Redistributions in binary form must reproduce the above copyright
       notice, this list of conditions and the following disclaimer in the
       documentation and/or other materials provided with the distribution.
     * Neither the name of Kelketek nor Winter's Oasis nor the
       names of its contributors may be used to endorse or promote products
       derived from this software without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  DISCLAIMED. IN NO EVENT SHALL KELKETEK OR WINTER'S OASIS BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  [INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION] HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  [INCLUDING NEGLIGENCE OR OTHERWISE] ARISING IN ANY WAY OUT OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. )

$def TRUE 1
$def FALSE 0
$def INVALID #-1
$def FATE prog ( Whichever DBREF you intend to store the crontab on )
$def CRONDIR "@cron" ( Directory where cron-related props will be stored. )
$def CRONTAB CRONDIR "/crontab" strcat ( Location of the crontab )
$def CRONPID CRONDIR "/pid" strcat ( Location of PID number )
( A crontab entry has six parts.
Minute, Hour, Day of Week, Month, Year, and the command )
$def CRON_SEGMENTS 6
$def TEST_TYPE 0 ( The test type is the first item in a list array )
$ifdef __neon wizard
    "W" "wizhidden_level" sysparm intostr strcat
$else
    "W"
$endif

$def JAN 1
$def FEB 2
$def MAR 3
$def APR 4
$def MAY 5
$def JUN 6
$def JUL 7
$def AUG 8
$def SEP 9
$def OCT 10
$def NOV 11
$def DEC 12

$def SUN 1
$def MON 2
$def TUE 3
$def WED 4
$def THU 5
$def FRI 6
$def SAT 7

lvar WEEKDAYS
lvar MONTHS
lvar PRESETS
lvar compiled_crontab
lvar DAYS_IN_MONTHS
lvar this_years_monthdays
lvar current_time
lvar last_year

: set_constants ( -- ) ( sets more complex 'constants' )
     { "MON" "1"
       "TUE" "2"
       "WED" "3"
       "THU" "4"
       "FRI" "5"
       "SAT" "6"
       "SUN" "7" }dict WEEKDAYS !

     ( For string substitution )
     { "JAN" "1"
       "FEB" "2"
       "MAR" "3"
       "APR" "4"
       "MAY" "5"
       "JUN" "6"
       "JUL" "7"
       "AUG" "8"
       "SEP" "9"
       "OCT" "10"
       "NOV" "11"
       "DEC" "12" }dict MONTHS !

     ( For math )
     { JAN 31
       FEB 28 ( To be modified later, in some cases. )
       MAR 31
       APR 30
       MAY 31
       JUN 30
       JUL 31
       AUG 31
       SEP 30
       OCT 31
       NOV 30
       DEC 31 }dict DAYS_IN_MONTHS !

     { "^([[:space:]]+)?@anually" "0 0 1 1 *"
       "^([[:space:]]+)?@monthly" "0 0 1 * *"
       "^([[:space:]]+)?@weekly"  "0 0 * * 0"
       "^([[:space:]]+)?@daily"   "0 0 * * *"
       "^([[:space:]]+)?@hourly"  "0 * * * *" }dict PRESETS !
;

: get_time ( -- @ ) ( Gets the current time, puts it into a workable arrray. )
    { timesplit } var! timevar
    ( We won't be using all of these. )
    { "seconds" "minutes" "hours" "monthday" "month" "year" "weekday" "yearday" }
    { swap
        foreach
            swap timevar array_getitem ( Zip these up into a dictionary array )
        repeat
    }dict timevar !
    ( Correct some incompatibility. Weekday starts at 1 instead of 0 like it should. )
    timevar @ "weekday" timevar @ "weekday" array_getitem -- array_setitem current_time !
    
;

: ctell ( s -- ) ( Emits a message if the player is valid, otherwise discards it. )
    me @ ok? not if
        exit
    then
    me @ swap notify
;

: month_days_set ( This has to be a function due to leap years. )
    var year
    current_time @ "year" array_getitem year !
    ( Leap years are screwwy. )
    year @ 4 % not if
        year @ 100 % not if
            year @ 400 % not if
                TRUE
            else
                FALSE
            then
        else
            TRUE
        then
    else
        FALSE
    then
    if
        DAYS_IN_MONTHS FEB 29 array_setitem this_years__monthdays !
    else
        DAYS_IN_MONTHS this_years_monthdays !
    then
;

: split_once[ str:target str:delimiter -- {} ]  ( Like strcut, but splits at a delimiter once, eliminating it. )
    target @ delimiter @ instr var! char
    char @ not if
        target @ ""
    else
        target @ char @ 1 - strcut
        delimiter @ strlen strcut swap pop
    then
;

: dash_parse[ str:cmd -- @:test ] ( Parses notations like "2-6" )
    var start_digit
    var end_digit
    cmd @ "^[[:digit:]]+-[[:digit:]]+$" REG_ICASE regexp and not if
        { "Invalid dash notation -- '" cmd @ "'" }cat abort
    then
    cmd @ "-" split_once end_digit ! start_digit !
    { start_digit @ atoi end_digit @ atoi "-" }list
    
;

: slash_parse[ str:cmd -- @:test ] ( Parses notations like "*/4" )
    var interval
    cmd @ "^[*0]/[[:digit:]]+$" REG_ICASE regexp and not if
        { "Invalid slash notation -- '" cmd @ "'" }cat abort
    then
    cmd @ "/" split_once swap pop interval !
    { interval @ atoi "/" }list
;

: w_parse[ str:cmd -- @:test ]
    var interval
    cmd @ "^[[:digit:]]+W$" REG_ICASE regexp and not if
        { "Invalid W notation -- '" cmd @ "'" }cat abort
    then
    cmd @ toupper "W" split_once swap pop interval !
    { interval @ atoi "W" }list
;

: l_parse[ str:cmd -- @:test ]
    var interval
    cmd @ "^[[:digit:]]+L$" REG_ICASE regexp and not if
        { "Invalid L notation -- '" cmd @ "'" }cat abort
    then
    cmd @ toupper "L" split_once swap pop interval !
    { interval @ atoi "L" }list
;

: dict_sub[ str:source_string dict:subst_dict -- str:processed_string ] ( Does a set of substitutions based on a dictionary )
    subst_dict @ foreach
        source_string @ -3 rotate REG_ICASE REG_ALL + regsub source_string !
    repeat
    source_string @
;

: parser[ str:time_type str:raw_time_string str:time_string bool:w_permitted? bool:l_permitted? -- @:time_tests ]
    var item
    { time_string @ "," explode array_make
      foreach
          item ! pop
          item @ case
              "/" instr when
                  item @ slash_parse
              end
              "*" strcmp not when
                  { "*" }list
              end
              "-" instr when
                  item @ dash_parse
              end
              "^[[:digit:]]+$" REG_ICASE regexp and when
                  { "digit" item @ atoi }list
              end
              "W" instring when
                  w_permitted? @ if
                      item @ w_parse
                  else
                      { "W not permitted in " time_type @ " field." }cat abort
                  then
              end
              "L" instring when
                  l_permitted? @ if
                      item @ l_parse
                  else
                      { "L not permitted in " time_type @ " field." }cat abort
                  then
              end
              default { "Invalid syntax for " time_type @ " -- '" item @ "'" }cat abort end
          endcase
      repeat
    }list
;

: parse_minute[ str:minute_string -- str:"minute" @:minute_tests ] ( Parses the minute notation )
    "minute" dup minute_string @ dup FALSE FALSE FALSE parser
;

: parse_hour[ str:hour_string -- str:"hour" @:day_tests ]
    "hour" dup hour_string @ dup FALSE FALSE FALSE parser
;

: parse_monthday[ str:monthday_string -- str:"day" @:day_tests ]
    "monthday" dup monthday_string @ dup TRUE TRUE FALSE parser
;

: parse_month[ str:month_string -- str:"month" @:month_tests ]
    "month" dup month_string @ dup MONTHS @ dict_sub FALSE FALSE FALSE parser
;

: parse_weekday[ str:weekday_string -- str:"year" @:year_tests ]
    "weekday" dup weekday_string @ dup WEEKDAYS @ dict_sub TRUE FALSE TRUE parser
;

: parse_target[ str:target_string -- "target" @:target_spec ]
    "target"
    var target
    target_string @ match target !
    target @ ok? target @ program? and not if
        { "Command ambiguous, invalid or nonexistant. String was '" target_string @
          "', match output was: " target @ unparseobj }cat abort
    then
    { target @ }list
;

: line_to_spec[ str:line -- array:cronitem ]
( Takes a string and derives a speclist from it. Returns true or false and an array 
  or a string respectively )

    var count
    var minute
    var hour
    var weekday
    var month
    var year
    var target
    var argument
    var compiled_line

    ( Separate the argument from the rest of the cron tab )
    line @ "|" split_once argument ! line !

    line @ PRESETS @ dict_sub line !

    { 
      'parse_minute 'parse_hour 'parse_monthday 'parse_month 'parse_weekday 'parse_target 
    }list var! parsetable


    line @ " " explode array_make line !
    ( Eliminate null strings from the explosion, if any. )
    { line @ foreach
          swap pop dup "" strcmp not if
               pop
          then
      repeat
     }list array_reverse line !

    line @ array_count CRON_SEGMENTS = not if
        "Cron entry has the wrong number of components." abort
    then
    {
        line @ foreach
              swap count !
              parsetable @ count @ array_getitem execute
          repeat
        
    }dict compiled_line !
    compiled_line @ "target" array_getitem argument @ swap array_appenditem
    compiled_line @ "target" array_setitem
;

: crontab_load ( -- ) ( Runs through the crontab and parses it )
    var raw_crontab
    var line
    var count
    var error
    set_constants
    "Loading crontab..." ctell
    EDEN CRONTAB array_get_proplist raw_crontab !
    { raw_crontab @ foreach
        swap pop
        count @ ++ count !
        1 try
            line_to_spec
        catch
            error ! { "Error parsing line " count @ ": " error @ }cat ctell
        endcatch
     repeat
    }list compiled_crontab !
    "Crontab loaded." ctell
;

: weekday?[ int:day ] ( Checks if a number represents a weekday. )
    day @ MON >= day @ FRI <= if
        TRUE
    else
        FALSE
    then
;

: border_date_check[int:month_maxdays int:date_to_check] ( Checks if a date is beyond month bounds. )
    date_to_check @ 1 < date_to_check @ month_maxdays > or if
        FALSE
    else
        TRUE
    then
;

: w[ str:time_type int:day_of_month ] ( Execute on closest weekday )
    var current_day
    var current_day_of_month
    var current_month
    var this_months_maxdays
    var difference
    var target_actual_weekday
    var guess
    current_time @ "monthday" array_getitem current_day_of_month !
    current_time @ "weekday" array_getitem current_day !
    ( Simple scenario. Date is today, today is a weekday )
    day_of_month @ current_day_of_month @ = if
        current_day @ weekday? if
            TRUE exit
        then
    then
    ( If it's not a Monday or Friday, it's not the closest day. )
    current_day_of_week @ MON = current_day_of_week @ FRI = or if
        FALSE exit
    then
    ( A candidate weekday is never more than 2 days away. )
    current_day_of_month @ day_of_month @ - abs 2 > if
        FALSE exit
    then
    ( Get how many days are in the current month. Don't want to jump
      month boundaries. )
    this_years_monthdays @ current_time @ "month" array_getitem
    array_getitem this_months_maxdays !
    ( Get day of week of target date )
    day_of_month @ current_day_of_month @ - difference !
    current_day_of_week @ difference @ + target_actual_weekday !
    target_actual_weekday @ SAT > if ( More than a week? Roll over. )
        target_actual_weekday SAT - target_actual_weekday !
    then
    target_actual_weekday @ MON < if ( Less than a week? Roll the other way. )
        target_actual_weekday SAT + target_actual_weekday !
    then
    ( Saturdays are closest to Fridays. One day lower. )
    target_actual_weekday @ SAT = if
        day_of_month 1 - guess !
        this_months_maxdays @ guess @ border_date_check not if
            guess @ current_day_of_month @ = if
                TRUE exit
            else
                FALSE exit
            then
        guess @ 2 + current_day_of_month = if ( Next Monday, then )
            TRUE exit
        else
            FALSE exit
        then
    then
    ( Sundats are closest to Mondays. One day higher. )
    target_actual_weekday @ SUN = if
        day_of_month 1 + guess !
        this_months_maxdays @ guess @ border_date_check not if
            guess @ current_day_of_month @ = if
                TRUE exit
            else
                FALSE exit
            then
        guess @ 2 - current_day_of_month = if ( Last Friday, then )
            TRUE exit
        else
            FALSE exit
        then
    then
;

: dash[ str:time_type int:begin_number int:end_number -- bool:result ]
    var this_time
    current_time @ time_type array_getitem this_time !
    this_time @ begin_number <= this_time @ end_number @ >= and if
        TRUE
    else
        FALSE
    then
;

: slash[ str:time_type int:interval -- bool:result ] ( Runs a / test. )
    current_time @ time_type array_getitem interval @ % not if
        TRUE
    else
        FALSE
    then
;

: star[ str:time_type -- bool:TRUE ] ( Returns true. Star is always true. )
    TRUE
;

: launch_progs
    compiled_crobtab @ time_tests
    foreach
        fork not if
            continue
        then
        swap dup run_tests if
            "target" array_getitem
            array_vals try
                swap call
            catch ( Remember to fill this in properly later. -Kel )
                pop
            endcatch
        else
            pop
        then
    repeat
;

: main_loop ( -- ) ( Main loop for the cron process )
    var oldme
    prog CRONPID pid setprop
    crontab_load
    "Cron start." ctell
    background
    begin
        fork not if
            60 timer_start "Minute"
            begin
                event_wait
                case
                    "Minute" smatch when
                        pop break
                    end
                    "Reload" smatch when
                        me @ oldme ! ( Reloader may be different. )
                        "player" array_getitem me ! crontab_load
                        oldme @ me !
                    end
                endcase
            repeat
        else
            launch_progs exit
        then
    repeat
;

: main
    "me" match me !

    me @ wizard flag? and me @ FATE controls and not if
        "Permission denied." ctell
    then

    trigger @ "Queued Event." strcmp not if
        init exit
    then

    command @ case 
        "#r*" smatch when
            live_reload 
        end
        "#e*" smatch when
            edit_crontab
        end
        "#sta*" smatch when
            manual_init
        end
        "#sto*" smatch when
            stop
        end
        default "Command not recognized: " command @ strcat ctell end
    endcase
;
